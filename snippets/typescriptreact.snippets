# A valid snippet should starts with:
#
#		snippet trigger_word [ "description" [ options ] ]
#
# and end with:
#
#		endsnippet
#
# Snippet options:
#
#		b - Beginning of line.
#		i - In-word expansion.
#		w - Word boundary.
#		r - Regular expression
#		e - Custom context snippet
#		A - Snippet will be triggered automatically, when condition matches.
#
# Basic example:
#
#		snippet emitter "emitter properties" b
#		private readonly ${1} = new Emitter<$2>()
#		public readonly ${1/^_(.*)/$1/}: Event<$2> = this.$1.event
#		endsnippet
#
# Online reference: https://github.com/SirVer/ultisnips/blob/master/doc/UltiSnips.txt
global !p

# Capitalize the first letter without affecting the rest of the letters
def capitalize_first(word):
	if(word):
		word = word[0].upper() + word[1:]
	return word
endglobal

extends typescript
extends javascriptreact

snippet rc "react functional component without props" b
const ${1:`!p snip.rv = snip.basename`} = ({ ...props }): JSX.Element => {
  return (
    <div {...props}>
      ${2}
    </div>
  )
}

export default $7`!p snip.rv = snip.basename`
endsnippet

# Functional components
snippet rcp "react functional component with props" b
export type ${1:`!p snip.rv = snip.basename`}Props = {
  ${2}
}

const ${3:`!p snip.rv = snip.basename`} = ({ ${4} }: ${5:`!p snip.rv = snip.basename`}Props): JSX.Element => {
  return (
    <div>
      ${6}
    </div>
  )
}

export default $7`!p snip.rv = snip.basename`
endsnippet
